// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: panel.proto

package panelv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PanelServiceClient is the client API for PanelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PanelServiceClient interface {
	CreatePanel(ctx context.Context, in *CreatePanelRequest, opts ...grpc.CallOption) (*Panel, error)
	GetPanel(ctx context.Context, in *GetPanelByIdRequest, opts ...grpc.CallOption) (*Panel, error)
	GetPanelByName(ctx context.Context, in *GetPanelByNameRequest, opts ...grpc.CallOption) (*Panel, error)
	UpdatePanel(ctx context.Context, in *UpdatePanelByIdRequest, opts ...grpc.CallOption) (*Panel, error)
	UpdatePanelByName(ctx context.Context, in *UpdatePanelByNameRequest, opts ...grpc.CallOption) (*Panel, error)
	DeletePanel(ctx context.Context, in *DeletePanelByIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeletePanelByName(ctx context.Context, in *DeletePanelByNameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type panelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPanelServiceClient(cc grpc.ClientConnInterface) PanelServiceClient {
	return &panelServiceClient{cc}
}

func (c *panelServiceClient) CreatePanel(ctx context.Context, in *CreatePanelRequest, opts ...grpc.CallOption) (*Panel, error) {
	out := new(Panel)
	err := c.cc.Invoke(ctx, "/panels.panel.v1.PanelService/CreatePanel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panelServiceClient) GetPanel(ctx context.Context, in *GetPanelByIdRequest, opts ...grpc.CallOption) (*Panel, error) {
	out := new(Panel)
	err := c.cc.Invoke(ctx, "/panels.panel.v1.PanelService/GetPanel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panelServiceClient) GetPanelByName(ctx context.Context, in *GetPanelByNameRequest, opts ...grpc.CallOption) (*Panel, error) {
	out := new(Panel)
	err := c.cc.Invoke(ctx, "/panels.panel.v1.PanelService/GetPanelByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panelServiceClient) UpdatePanel(ctx context.Context, in *UpdatePanelByIdRequest, opts ...grpc.CallOption) (*Panel, error) {
	out := new(Panel)
	err := c.cc.Invoke(ctx, "/panels.panel.v1.PanelService/UpdatePanel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panelServiceClient) UpdatePanelByName(ctx context.Context, in *UpdatePanelByNameRequest, opts ...grpc.CallOption) (*Panel, error) {
	out := new(Panel)
	err := c.cc.Invoke(ctx, "/panels.panel.v1.PanelService/UpdatePanelByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panelServiceClient) DeletePanel(ctx context.Context, in *DeletePanelByIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/panels.panel.v1.PanelService/DeletePanel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panelServiceClient) DeletePanelByName(ctx context.Context, in *DeletePanelByNameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/panels.panel.v1.PanelService/DeletePanelByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PanelServiceServer is the server API for PanelService service.
// All implementations must embed UnimplementedPanelServiceServer
// for forward compatibility
type PanelServiceServer interface {
	CreatePanel(context.Context, *CreatePanelRequest) (*Panel, error)
	GetPanel(context.Context, *GetPanelByIdRequest) (*Panel, error)
	GetPanelByName(context.Context, *GetPanelByNameRequest) (*Panel, error)
	UpdatePanel(context.Context, *UpdatePanelByIdRequest) (*Panel, error)
	UpdatePanelByName(context.Context, *UpdatePanelByNameRequest) (*Panel, error)
	DeletePanel(context.Context, *DeletePanelByIdRequest) (*emptypb.Empty, error)
	DeletePanelByName(context.Context, *DeletePanelByNameRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedPanelServiceServer()
}

// UnimplementedPanelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPanelServiceServer struct {
}

func (UnimplementedPanelServiceServer) CreatePanel(context.Context, *CreatePanelRequest) (*Panel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePanel not implemented")
}
func (UnimplementedPanelServiceServer) GetPanel(context.Context, *GetPanelByIdRequest) (*Panel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPanel not implemented")
}
func (UnimplementedPanelServiceServer) GetPanelByName(context.Context, *GetPanelByNameRequest) (*Panel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPanelByName not implemented")
}
func (UnimplementedPanelServiceServer) UpdatePanel(context.Context, *UpdatePanelByIdRequest) (*Panel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePanel not implemented")
}
func (UnimplementedPanelServiceServer) UpdatePanelByName(context.Context, *UpdatePanelByNameRequest) (*Panel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePanelByName not implemented")
}
func (UnimplementedPanelServiceServer) DeletePanel(context.Context, *DeletePanelByIdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePanel not implemented")
}
func (UnimplementedPanelServiceServer) DeletePanelByName(context.Context, *DeletePanelByNameRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePanelByName not implemented")
}
func (UnimplementedPanelServiceServer) mustEmbedUnimplementedPanelServiceServer() {}

// UnsafePanelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PanelServiceServer will
// result in compilation errors.
type UnsafePanelServiceServer interface {
	mustEmbedUnimplementedPanelServiceServer()
}

func RegisterPanelServiceServer(s grpc.ServiceRegistrar, srv PanelServiceServer) {
	s.RegisterService(&PanelService_ServiceDesc, srv)
}

func _PanelService_CreatePanel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePanelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanelServiceServer).CreatePanel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panels.panel.v1.PanelService/CreatePanel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanelServiceServer).CreatePanel(ctx, req.(*CreatePanelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanelService_GetPanel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPanelByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanelServiceServer).GetPanel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panels.panel.v1.PanelService/GetPanel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanelServiceServer).GetPanel(ctx, req.(*GetPanelByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanelService_GetPanelByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPanelByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanelServiceServer).GetPanelByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panels.panel.v1.PanelService/GetPanelByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanelServiceServer).GetPanelByName(ctx, req.(*GetPanelByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanelService_UpdatePanel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePanelByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanelServiceServer).UpdatePanel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panels.panel.v1.PanelService/UpdatePanel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanelServiceServer).UpdatePanel(ctx, req.(*UpdatePanelByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanelService_UpdatePanelByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePanelByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanelServiceServer).UpdatePanelByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panels.panel.v1.PanelService/UpdatePanelByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanelServiceServer).UpdatePanelByName(ctx, req.(*UpdatePanelByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanelService_DeletePanel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePanelByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanelServiceServer).DeletePanel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panels.panel.v1.PanelService/DeletePanel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanelServiceServer).DeletePanel(ctx, req.(*DeletePanelByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanelService_DeletePanelByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePanelByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanelServiceServer).DeletePanelByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panels.panel.v1.PanelService/DeletePanelByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanelServiceServer).DeletePanelByName(ctx, req.(*DeletePanelByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PanelService_ServiceDesc is the grpc.ServiceDesc for PanelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PanelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "panels.panel.v1.PanelService",
	HandlerType: (*PanelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePanel",
			Handler:    _PanelService_CreatePanel_Handler,
		},
		{
			MethodName: "GetPanel",
			Handler:    _PanelService_GetPanel_Handler,
		},
		{
			MethodName: "GetPanelByName",
			Handler:    _PanelService_GetPanelByName_Handler,
		},
		{
			MethodName: "UpdatePanel",
			Handler:    _PanelService_UpdatePanel_Handler,
		},
		{
			MethodName: "UpdatePanelByName",
			Handler:    _PanelService_UpdatePanelByName_Handler,
		},
		{
			MethodName: "DeletePanel",
			Handler:    _PanelService_DeletePanel_Handler,
		},
		{
			MethodName: "DeletePanelByName",
			Handler:    _PanelService_DeletePanelByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "panel.proto",
}
